/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleIndices = { CSON: 0 },
      peg$startRuleIndex   = 0,

      peg$consts = [
        function(v) { return v; },
        "\uFEFF",
        peg$literalExpectation("\uFEFF", false),
        /^[ \t]/,
        peg$classExpectation([" ", "\t"], false, false),
        "\r",
        peg$literalExpectation("\r", false),
        "\n",
        peg$literalExpectation("\n", false),
        "#",
        peg$literalExpectation("#", false),
        /^[^\n]/,
        peg$classExpectation(["\n"], true, false),
        "null",
        peg$literalExpectation("null", false),
        function() { return null; },
        "true",
        peg$literalExpectation("true", false),
        function() { return true; },
        "false",
        peg$literalExpectation("false", false),
        function() { return false; },
        function() { return Number ( text () ); },
        "0b",
        peg$literalExpectation("0b", false),
        /^[01]/,
        peg$classExpectation(["0", "1"], false, false),
        "0o",
        peg$literalExpectation("0o", false),
        /^[0-7]/,
        peg$classExpectation([["0", "7"]], false, false),
        "0x",
        peg$literalExpectation("0x", false),
        /^[0-9a-fA-F]/,
        peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
        "-",
        peg$literalExpectation("-", false),
        "0",
        peg$literalExpectation("0", false),
        /^[1-9]/,
        peg$classExpectation([["1", "9"]], false, false),
        /^[0-9]/,
        peg$classExpectation([["0", "9"]], false, false),
        ".",
        peg$literalExpectation(".", false),
        "e",
        peg$literalExpectation("e", false),
        /^[\-+]/,
        peg$classExpectation(["-", "+"], false, false),
        "'''",
        peg$literalExpectation("'''", false),
        "\\'''",
        peg$literalExpectation("\\'''", false),
        function() { return "'''"; },
        "\"\"\"",
        peg$literalExpectation("\"\"\"", false),
        "\\\"\"\"",
        peg$literalExpectation("\\\"\"\"", false),
        function() { return '"""'; },
        "'",
        peg$literalExpectation("'", false),
        "\\'",
        peg$literalExpectation("\\'", false),
        function() { return "'"; },
        "\"",
        peg$literalExpectation("\"", false),
        "\\\"",
        peg$literalExpectation("\\\"", false),
        function() { return '"'; },
        function(v) {
            const loc = location ();
            const isBlock = ( v[0].length === 3 );
            const isMultiline = ( loc.start.line !== loc.end.line );
            let string = v[1].map ( x => x[1] ).join ( '' );
            if ( isMultiline ) {
              if ( isBlock ) {
                string = string.replace ( /^[^\S\r\n]*\n/g, '' ); // Trim start
                string = string.replace ( /\n[^\S\r\n]*$/g, '' ); // Trim end
                string = string.replace ( /(\S\s*)\\\n\s*(\S)/g, '$1$2' ); // Trim escaped newlines
                const indentations = string.split ( '\n' ).filter ( line => !/^\s*$/.test ( line ) ).map ( line => line.match ( '(^[^\\S\\r\\n]*)' )[1].length );
                const indentation = indentations.length ? indentations.reduce ( ( prev, next ) => Math.min ( prev, next ) ) : 0;
                const indentationRe = new RegExp ( `^[^\\S\\r\\n]{${indentation}}` );
                string = string.split ( '\n' ).map ( line => line.replace ( indentationRe, '' ) ).join ( '\n' ); // Trim indentation
              } else {
                string = string.replace ( /^\s*\n\s*(\S)/g, '$1' ); // Trim start
                string = string.replace ( /(\S)\s*\n\s*$/g, '$1' ); // Trim end
                string = string.replace ( /(\S\s*)\\\n\s*(\S)/g, '$1$2' ); // Trim escaped newlines
                string = string.replace ( /(\S)\s*\n\s*(\S)/g, '$1 $2' ); // Collapse middle
              }
            }
            string = string.replace ( newlinePlaceholderRe, '\n' );
            return string;
          },
        peg$anyExpectation(),
        "\\",
        peg$literalExpectation("\\", false),
        /^[\\\/#]/,
        peg$classExpectation(["\\", "/", "#"], false, false),
        "\\n",
        peg$literalExpectation("\\n", false),
        function() { return newlinePlaceholder; },
        /^[bfrt]/,
        peg$classExpectation(["b", "f", "r", "t"], false, false),
        function(v) { return { b: '\b', f: '\f', r: '\r', t: '\t' }[v]; },
        "\\u",
        peg$literalExpectation("\\u", false),
        function(digits) { return String.fromCharCode ( parseInt ( digits, 16 ) ); },
        function(head, v) { return v; },
        function(head, tail) { return [head].concat ( tail ); },
        function(v) { return v || []; },
        "[",
        peg$literalExpectation("[", false),
        "]",
        peg$literalExpectation("]", false),
        ",",
        peg$literalExpectation(",", false),
        function(head, kw) { return kw; },
        function(head, tail) { return [head].concat ( tail ).reduce ( ( acc, kw ) => ( acc[kw.k] = kw.v, acc ), {} ); },
        function(v) { return v || {} },
        function(k, v) { return {k, v }; },
        "{",
        peg$literalExpectation("{", false),
        "}",
        peg$literalExpectation("}", false),
        /^[$a-zA-Z_]/,
        peg$classExpectation(["$", ["a", "z"], ["A", "Z"], "_"], false, false),
        /^[$0-9a-zA-Z_]/,
        peg$classExpectation(["$", ["0", "9"], ["a", "z"], ["A", "Z"], "_"], false, false),
        function() { return text (); },
        ":",
        peg$literalExpectation(":", false)
      ],

      peg$bytecode = [
        peg$decode("%;!.\" &\"/C#;\"/:$;'/1$;\"/($8$: $!!)($'#(#'#(\"'#&'#"),
        peg$decode("2!\"\"6!7\""),
        peg$decode("%$%;$/:#;&.\" &\"/,$;%/#$+#)(#'#(\"'#&'#0D*%;$/:#;&.\" &\"/,$;%/#$+#)(#'#(\"'#&'#&/,#;$/#$+\")(\"'#&'#"),
        peg$decode("%$%;$/:#;&.\" &\"/,$;%/#$+#)(#'#(\"'#&'#/G#0D*%;$/:#;&.\" &\"/,$;%/#$+#)(#'#(\"'#&'#&&&#/,#;$/#$+\")(\"'#&'#"),
        peg$decode("$4#\"\"5!7$0)*4#\"\"5!7$&"),
        peg$decode("%2%\"\"6%7&.\" &\"/2#2'\"\"6'7(/#$+\")(\"'#&'#"),
        peg$decode("%2)\"\"6)7*/?#$4+\"\"5!7,0)*4+\"\"5!7,&/#$+\")(\"'#&'#"),
        peg$decode(";C.A &;(.; &;).5 &;,./ &;1.) &;7.# &;;"),
        peg$decode("%2-\"\"6-7./& 8!:/! )"),
        peg$decode(";*.# &;+"),
        peg$decode("%20\"\"6071/& 8!:2! )"),
        peg$decode("%23\"\"6374/& 8!:5! )"),
        peg$decode("%;-./ &;..) &;/.# &;0/& 8!:6! )"),
        peg$decode("%27\"\"6778/E#$49\"\"5!7:/,#0)*49\"\"5!7:&&&#/#$+\")(\"'#&'#"),
        peg$decode("%2;\"\"6;7</E#$4=\"\"5!7>/,#0)*4=\"\"5!7>&&&#/#$+\")(\"'#&'#"),
        peg$decode("%2?\"\"6?7@/E#$4A\"\"5!7B/,#0)*4A\"\"5!7B&&&#/#$+\")(\"'#&'#"),
        peg$decode("%2C\"\"6C7D.\" &\"/\u013A#%2E\"\"6E7F.O &%4G\"\"5!7H/?#$4I\"\"5!7J0)*4I\"\"5!7J&/#$+\")(\"'#&'#/c#%2K\"\"6K7L/E#$4I\"\"5!7J/,#0)*4I\"\"5!7J&&&#/#$+\")(\"'#&'#.\" &\"/#$+\")(\"'#&'#.U &%2K\"\"6K7L/E#$4I\"\"5!7J/,#0)*4I\"\"5!7J&&&#/#$+\")(\"'#&'#/w$%2M\"\"6M7N/Y#4O\"\"5!7P.\" &\"/E$$4I\"\"5!7J/,#0)*4I\"\"5!7J&&&#/#$+#)(#'#(\"'#&'#.\" &\"/#$+#)(#'#(\"'#&'#"),
        peg$decode("%%2Q\"\"6Q7R/\xBA#$%%<2Q\"\"6Q7R=.##&&!&'#/C#%2S\"\"6S7T/& 8!:U! ).# &;2/#$+\")(\"'#&'#0_*%%<2Q\"\"6Q7R=.##&&!&'#/C#%2S\"\"6S7T/& 8!:U! ).# &;2/#$+\")(\"'#&'#&/2$2Q\"\"6Q7R/#$+#)(#'#(\"'#&'#.\u0224 &%2V\"\"6V7W/\xBA#$%%<2V\"\"6V7W=.##&&!&'#/C#%2X\"\"6X7Y/& 8!:Z! ).# &;2/#$+\")(\"'#&'#0_*%%<2V\"\"6V7W=.##&&!&'#/C#%2X\"\"6X7Y/& 8!:Z! ).# &;2/#$+\")(\"'#&'#&/2$2V\"\"6V7W/#$+#)(#'#(\"'#&'#.\u0177 &%2[\"\"6[7\\/\xBA#$%%<2[\"\"6[7\\=.##&&!&'#/C#%2]\"\"6]7^/& 8!:_! ).# &;2/#$+\")(\"'#&'#0_*%%<2[\"\"6[7\\=.##&&!&'#/C#%2]\"\"6]7^/& 8!:_! ).# &;2/#$+\")(\"'#&'#&/2$2[\"\"6[7\\/#$+#)(#'#(\"'#&'#.\xCA &%2`\"\"6`7a/\xBA#$%%<2`\"\"6`7a=.##&&!&'#/C#%2b\"\"6b7c/& 8!:d! ).# &;2/#$+\")(\"'#&'#0_*%%<2`\"\"6`7a=.##&&!&'#/C#%2b\"\"6b7c/& 8!:d! ).# &;2/#$+\")(\"'#&'#&/2$2`\"\"6`7a/#$+#)(#'#(\"'#&'#/' 8!:e!! )"),
        peg$decode(";3.: &;4.4 &;5.. &;6.( &1\"\"5!7f"),
        peg$decode("%2g\"\"6g7h/7#4i\"\"5!7j/($8\": \"! )(\"'#&'#"),
        peg$decode("%2k\"\"6k7l/& 8!:m! )"),
        peg$decode("%2g\"\"6g7h/7#4n\"\"5!7o/($8\":p\"! )(\"'#&'#"),
        peg$decode("%2q\"\"6q7r/u#%%4A\"\"5!7B/P#4A\"\"5!7B/A$4A\"\"5!7B/2$4A\"\"5!7B/#$+$)($'#(#'#(\"'#&'#/\"!&,)/($8\":s\"! )(\"'#&'#"),
        peg$decode("%;8/\x9F#%;'/y#$%;:/2#;'/)$8\":t\"\"$ )(\"'#&'#0<*%;:/2#;'/)$8\":t\"\"$ )(\"'#&'#&/7$;:.\" &\"/)$8#:u#\"\"!)(#'#(\"'#&'#.\" &\"/1$;9/($8#:v#!!)(#'#(\"'#&'#"),
        peg$decode("%;\"/;#2w\"\"6w7x/,$;\"/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\"/2#2y\"\"6y7z/#$+\")(\"'#&'#"),
        peg$decode("%;\"/;#2{\"\"6{7|/,$;\"/#$+#)(#'#(\"'#&'#.J &%;#/@#2{\"\"6{7|.\" &\"/,$;\"/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;=/\x9F#%;</y#$%;?/2#;</)$8\":}\"\"$ )(\"'#&'#0<*%;?/2#;</)$8\":}\"\"$ )(\"'#&'#&/7$;?.\" &\"/)$8#:~#\"\"!)(#'#(\"'#&'#.\" &\"/1$;>/($8#:\x7F#!!)(#'#(\"'#&'#"),
        peg$decode("%;A/;#;B/2$;'/)$8#:\x80#\"\" )(#'#(\"'#&'#"),
        peg$decode("%;\"/;#2\x81\"\"6\x817\x82/,$;\"/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\"/2#2\x83\"\"6\x837\x84/#$+\")(\"'#&'#"),
        peg$decode("%;\"/;#2{\"\"6{7|/,$;\"/#$+#)(#'#(\"'#&'#.J &%;#/@#2{\"\"6{7|.\" &\"/,$;\"/#$+#)(#'#(\"'#&'#"),
        peg$decode("%4\x85\"\"5!7\x86/C#$4\x87\"\"5!7\x880)*4\x87\"\"5!7\x88&/'$8\":\x89\" )(\"'#&'#"),
        peg$decode(";1.# &;@"),
        peg$decode("%;\"/;#2\x8A\"\"6\x8A7\x8B/,$;\"/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\"/\x83#%;</k#$%;?/2#;</)$8\":}\"\"$ )(\"'#&'#0<*%;?/2#;</)$8\":}\"\"$ )(\"'#&'#&/)$8\":~\"\"! )(\"'#&'#/($8\":\x7F\"! )(\"'#&'#")
      ],

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    var bc = new Array(s.length), i;

    for (i = 0; i < s.length; i++) {
      bc[i] = s.charCodeAt(i) - 32;
    }

    return bc;
  }

  function peg$parseRule(index) {
    var bc    = peg$bytecode[index],
        ip    = 0,
        ips   = [],
        end   = bc.length,
        ends  = [],
        stack = [],
        params, i;

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(void 0);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
            for (i = 0; i < bc[ip + 3]; i++) {
              params[i] = stack[stack.length - 1 - params[i]];
            }

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    return stack[0];
  }


    const newlinePlaceholder = `<NEWLINE:PLACEHOLDER:${Math.random ()}>`;
    const newlinePlaceholderRe = new RegExp ( newlinePlaceholder, 'g' );


  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export const CSON = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
